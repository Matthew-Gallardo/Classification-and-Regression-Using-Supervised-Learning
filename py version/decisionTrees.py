{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0 , Score: 0.00258\n",
      "Feature: 1 , Score: 0.00406\n",
      "Feature: 2 , Score: 0.00237\n",
      "Feature: 3 , Score: 0.00180\n",
      "Feature: 4 , Score: 0.51632\n",
      "Feature: 5 , Score: 0.43851\n",
      "Feature: 6 , Score: 0.02769\n",
      "Feature: 7 , Score: 0.00264\n",
      "Feature: 8 , Score: 0.00305\n",
      "Feature: 9 , Score: 0.00098\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#decision tree feature importance\n",
    "from sklearn.datasets import make_regression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from matplotlib import pyplot\n",
    "#define dataset\n",
    "X, y= make_regression(n_samples=1000, n_features=10, n_informative=5,  random_state=1)\n",
    "#Define the model\n",
    "model =DecisionTreeRegressor()\n",
    "#fit the model\n",
    "model.fit(X,y)\n",
    "#get importance\n",
    "importance = model.feature_importances_\n",
    "#summarize the feature importance\n",
    "for i, v in enumerate(importance):\n",
    "    print ('Feature: %0d , Score: %.5f' %(i, v))\n",
    "#plot feature importance\n",
    "pyplot.bar([x for x in range (len(importance))], importance)\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0 , Score: 0.01849\n",
      "Feature: 1 , Score: 0.01313\n",
      "Feature: 2 , Score: 0.18347\n",
      "Feature: 3 , Score: 0.30453\n",
      "Feature: 4 , Score: 0.08808\n",
      "Feature: 5 , Score: 0.00552\n",
      "Feature: 6 , Score: 0.17539\n",
      "Feature: 7 , Score: 0.04084\n",
      "Feature: 8 , Score: 0.12818\n",
      "Feature: 9 , Score: 0.04237\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#decision tree feature importance on a classification problem\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from matplotlib import pyplot\n",
    "#define dataset\n",
    "X, y= make_classification(n_samples=1000, n_features=10, n_informative=5,n_redundant=5, random_state=1)\n",
    "#Define the model\n",
    "model =DecisionTreeClassifier()\n",
    "#fit the model\n",
    "model.fit(X,y)\n",
    "#get importance\n",
    "importance = model.feature_importances_\n",
    "#summarize the feature importance\n",
    "for i, v in enumerate(importance):\n",
    "    print ('Feature: %0d , Score: %.5f' %(i, v))\n",
    "#plot feature importance\n",
    "pyplot.bar([x for x in range (len(importance))], importance)\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0 , Score: 0.00275\n",
      "Feature: 1 , Score: 0.00536\n",
      "Feature: 2 , Score: 0.00297\n",
      "Feature: 3 , Score: 0.00300\n",
      "Feature: 4 , Score: 0.53278\n",
      "Feature: 5 , Score: 0.41848\n",
      "Feature: 6 , Score: 0.02581\n",
      "Feature: 7 , Score: 0.00299\n",
      "Feature: 8 , Score: 0.00300\n",
      "Feature: 9 , Score: 0.00287\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Random forest feature importance on a regression problem\n",
    "from sklearn.datasets import make_regression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from matplotlib import pyplot\n",
    "#define dataset\n",
    "X, y= make_regression(n_samples=1000, n_features=10, n_informative=5, random_state=1)\n",
    "#Define the model\n",
    "model =RandomForestRegressor()\n",
    "#fit the model\n",
    "model.fit(X,y)\n",
    "#get importance\n",
    "importance = model.feature_importances_\n",
    "#summarize the feature importance\n",
    "for i, v in enumerate(importance):\n",
    "    print ('Feature: %0d , Score: %.5f' %(i, v))\n",
    "#plot feature importance\n",
    "pyplot.bar([x for x in range (len(importance))], importance)\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0 , Score: 0.07481\n",
      "Feature: 1 , Score: 0.11868\n",
      "Feature: 2 , Score: 0.16885\n",
      "Feature: 3 , Score: 0.17593\n",
      "Feature: 4 , Score: 0.08230\n",
      "Feature: 5 , Score: 0.11796\n",
      "Feature: 6 , Score: 0.09034\n",
      "Feature: 7 , Score: 0.04494\n",
      "Feature: 8 , Score: 0.08377\n",
      "Feature: 9 , Score: 0.04241\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#random forest feature importance on a classification problem\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from matplotlib import pyplot\n",
    "#define dataset\n",
    "X, y= make_classification(n_samples=1000, n_features=10, n_informative=5, n_redundant=5, random_state=1)\n",
    "#Define the model\n",
    "model =RandomForestClassifier()\n",
    "#fit the model\n",
    "model.fit(X,y)\n",
    "#get importance\n",
    "importance = model.feature_importances_\n",
    "#summarize the feature importance\n",
    "for i, v in enumerate(importance):\n",
    "    print ('Feature: %0d , Score: %.5f' %(i, v))\n",
    "#plot feature importance\n",
    "pyplot.bar([x for x in range (len(importance))], importance)\n",
    "pyplot.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
